<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dishwasher Control App</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        body {
            background-color: #f5f5f5;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .mobile-container {
            width: 375px;
            height: 812px; /* iPhone X height */
            background-color: #f8f9fa;
            border-radius: 40px;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            position: relative;
            padding: 20px;
        }

        /* Header Styles */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-top: 10px;
        }

        .header h1 {
            font-size: 28px;
            font-weight: 700;
            color: #0d75ec;
        }

        .settings-icon {
            color: #0d75ec;
            background-color: rgba(13, 117, 236, 0.1);
            height: 40px;
            width: 40px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        /* Status Card */
        .status-card {
            background-color: white;
            border-radius: 20px;
            padding: 20px;
            margin-bottom: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .status-indicator {
            width: 70px;
            height: 70px;
            border-radius: 35px;
            background-color: #f0f5ff;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.3s ease;
        }

        .status-indicator i {
            font-size: 30px;
            color: #0d75ec;
        }

        .status-info {
            flex: 1;
        }

        .status-label {
            font-size: 14px;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .status-text {
            font-size: 20px;
            font-weight: 600;
            color: #212529;
        }

        /* Program Selection */
        .section {
            margin-bottom: 25px;
        }

        .section-label {
            font-size: 16px;
            font-weight: 600;
            color: #495057;
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .section-label i {
            color: #0d75ec;
            font-size: 18px;
        }

        .option-cards {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .option-card {
            background-color: white;
            border-radius: 15px;
            padding: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: all 0.2s ease;
            border: 2px solid transparent;
            position: relative;
            overflow: hidden;
        }

        .option-card.active {
            border-color: #0d75ec;
            background-color: #f0f5ff;
        }

        .option-card.active::after {
            content: 'âœ“';
            position: absolute;
            top: 10px;
            right: 10px;
            color: #0d75ec;
            font-size: 16px;
            font-weight: bold;
        }

        .option-icon {
            font-size: 24px;
            margin-bottom: 10px;
            color: #0d75ec;
        }

        .option-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 5px;
            color: #212529;
        }

        .option-desc {
            font-size: 12px;
            color: #6c757d;
        }

        /* Mode Selection */
        .mode-toggle {
            background-color: white;
            border-radius: 15px;
            display: flex;
            padding: 5px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }

        .mode-option {
            flex: 1;
            text-align: center;
            padding: 12px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 600;
            font-size: 15px;
        }

        .mode-option.active {
            background-color: #0d75ec;
            color: white;
        }

        .mode-option i {
            margin-right: 6px;
        }

        /* Time Selection */
        .time-selector {
            background-color: white;
            border-radius: 15px;
            padding: 15px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .time-toggle {
            position: relative;
            width: 52px;
            height: 30px;
        }

        .time-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .time-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .3s;
            border-radius: 34px;
        }

        .time-slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
        }

        .time-toggle input:checked + .time-slider {
            background-color: #0d75ec;
        }

        .time-toggle input:checked + .time-slider:before {
            transform: translateX(22px);
        }

        .time-controls {
            display: flex;
            align-items: center;
            flex: 1;
        }

        .time-display {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 8px;
            margin: 0 10px;
            min-width: 60px;
            text-align: center;
            font-weight: 600;
            font-size: 18px;
            color: #212529;
        }

        .time-button {
            background-color: #f0f5ff;
            color: #0d75ec;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.2s ease;
        }

        .time-button:hover {
            background-color: #0d75ec;
            color: white;
        }

        .time-info {
            font-size: 14px;
            color: #6c757d;
            margin-left: 10px;
        }

        /* Start Button */
        .start-button {
            background-color: #0d75ec;
            color: white;
            border: none;
            border-radius: 15px;
            padding: 18px;
            font-size: 18px;
            font-weight: 600;
            width: 100%;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-top: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            box-shadow: 0 6px 12px rgba(13, 117, 236, 0.2);
        }

        .start-button:hover {
            background-color: #0a63c7;
        }

        .start-button:disabled {
            background-color: #a9c7f0;
            cursor: not-allowed;
        }

        /* Notification Modal */
        .notification-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .notification-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .notification-card {
            background-color: white;
            width: 80%;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            animation: slideUp 0.4s ease;
        }

        @keyframes slideUp {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .notification-icon {
            width: 70px;
            height: 70px;
            border-radius: 35px;
            margin: 0 auto 20px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .notification-icon.success {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .notification-icon.warning {
            background-color: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .notification-icon i {
            font-size: 32px;
        }

        .notification-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #212529;
        }

        .notification-message {
            font-size: 15px;
            color: #6c757d;
            margin-bottom: 25px;
        }

        .notification-button {
            background-color: #0d75ec;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .notification-button:hover {
            background-color: #0a63c7;
        }

        /* Animation for running state */
        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .status-indicator.running i {
            animation: rotate 2s linear infinite;
        }
    </style>
</head>
<body>
    <div class="mobile-container">
        <!-- Header Section -->
        <div class="header">
            <h1>Dishwasher</h1>
            <div class="settings-icon">
                <i class="fas fa-cog"></i>
            </div>
        </div>

        <!-- Status Card -->
        <div class="status-card">
            <div class="status-indicator" id="statusIndicator">
                <i class="fas fa-power-off" id="statusIcon"></i>
            </div>
            <div class="status-info">
                <div class="status-label">Status</div>
                <div class="status-text" id="statusText">Ready</div>
            </div>
        </div>

        <!-- Program Selection Section -->
        <div class="section">
            <div class="section-label">
                <i class="fas fa-water"></i>
                <span>Washing Program</span>
            </div>
            <div class="option-cards">
                <div class="option-card active" id="basicWash">
                    <div class="option-icon">
                        <i class="fas fa-glass-whiskey"></i>
                    </div>
                    <div class="option-title">Basic Wash</div>
                    <div class="option-desc">For lightly soiled dishes</div>
                </div>
                <div class="option-card" id="intensiveWash">
                    <div class="option-icon">
                        <i class="fas fa-utensils"></i>
                    </div>
                    <div class="option-title">Intensive</div>
                    <div class="option-desc">For heavily soiled dishes</div>
                </div>
            </div>
        </div>

        <!-- Mode Selection Section -->
        <div class="section">
            <div class="section-label">
                <i class="fas fa-sliders-h"></i>
                <span>Washing Mode</span>
            </div>
            <div class="mode-toggle">
                <div class="mode-option active" id="ecoMode">
                    <i class="fas fa-leaf"></i>Eco
                </div>
                <div class="mode-option" id="normalMode">
                    <i class="fas fa-tint"></i>Normal
                </div>
            </div>
        </div>

        <!-- Time Selection Section -->
        <div class="section">
            <div class="section-label">
                <i class="far fa-clock"></i>
                <span>Delayed Start</span>
            </div>
            <div class="time-selector">
                <label class="time-toggle">
                    <input type="checkbox" id="timeToggle">
                    <span class="time-slider"></span>
                </label>
                <div class="time-controls">
                    <button class="time-button" id="decreaseTime">
                        <i class="fas fa-minus"></i>
                    </button>
                    <div class="time-display" id="timeDisplay">1h</div>
                    <button class="time-button" id="increaseTime">
                        <i class="fas fa-plus"></i>
                    </button>
                    <div class="time-info">Delay</div>
                </div>
            </div>
        </div>

        <!-- Start Button -->
        <button class="start-button" id="startButton">
            <i class="fas fa-play"></i>
            <span>Start Washing</span>
        </button>

        <!-- Complete Notification -->
        <div class="notification-overlay" id="completeNotification">
            <div class="notification-card">
                <div class="notification-icon success">
                    <i class="fas fa-check"></i>
                </div>
                <div class="notification-title">Washing Complete</div>
                <div class="notification-message">Your dishes are clean and ready to use!</div>
                <button class="notification-button" id="completeButton">OK</button>
            </div>
        </div>

        <!-- Water Tap Notification -->
        <div class="notification-overlay" id="waterTapNotification">
            <div class="notification-card">
                <div class="notification-icon warning">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="notification-title">Water Tap Not Open</div>
                <div class="notification-message">Please check the water tap and try again.</div>
                <button class="notification-button" id="waterTapButton">Check</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const statusIndicator = document.getElementById('statusIndicator');
        const statusIcon = document.getElementById('statusIcon');
        const statusText = document.getElementById('statusText');
        const basicWash = document.getElementById('basicWash');
        const intensiveWash = document.getElementById('intensiveWash');
        const ecoMode = document.getElementById('ecoMode');
        const normalMode = document.getElementById('normalMode');
        const timeToggle = document.getElementById('timeToggle');
        const decreaseTime = document.getElementById('decreaseTime');
        const increaseTime = document.getElementById('increaseTime');
        const timeDisplay = document.getElementById('timeDisplay');
        const startButton = document.getElementById('startButton');
        const completeNotification = document.getElementById('completeNotification');
        const waterTapNotification = document.getElementById('waterTapNotification');
        const completeButton = document.getElementById('completeButton');
        const waterTapButton = document.getElementById('waterTapButton');

        // Application State
        let state = {
            program: 'basic', // 'basic' or 'intensive'
            mode: 'eco', // 'eco' or 'normal'
            delayEnabled: false,
            delayHours: 1,
            isRunning: false,
            waterTapOpen: true // This will be simulated
        };

        // Event Listeners for Washing Program
        basicWash.addEventListener('click', () => {
            if (!state.isRunning) {
                basicWash.classList.add('active');
                intensiveWash.classList.remove('active');
                state.program = 'basic';
            }
        });

        intensiveWash.addEventListener('click', () => {
            if (!state.isRunning) {
                intensiveWash.classList.add('active');
                basicWash.classList.remove('active');
                state.program = 'intensive';
            }
        });

        // Event Listeners for Washing Mode
        ecoMode.addEventListener('click', () => {
            if (!state.isRunning) {
                ecoMode.classList.add('active');
                normalMode.classList.remove('active');
                state.mode = 'eco';
            }
        });

        normalMode.addEventListener('click', () => {
            if (!state.isRunning) {
                normalMode.classList.add('active');
                ecoMode.classList.remove('active');
                state.mode = 'normal';
            }
        });

        // Event Listeners for Delayed Start
        timeToggle.addEventListener('change', () => {
            state.delayEnabled = timeToggle.checked;
        });

        decreaseTime.addEventListener('click', () => {
            if (state.delayHours > 1 && !state.isRunning) {
                state.delayHours--;
                updateTimeDisplay();
            }
        });

        increaseTime.addEventListener('click', () => {
            if (state.delayHours < 24 && !state.isRunning) {
                state.delayHours++;
                updateTimeDisplay();
            }
        });

        // Update Time Display
        function updateTimeDisplay() {
            timeDisplay.textContent = `${state.delayHours}h`;
        }

        // Start Button Event Listener
        startButton.addEventListener('click', () => {
            if (state.isRunning) return;
            
            // Simulate water tap check (50% chance for demo purposes)
            state.waterTapOpen = Math.random() >= 0.5;
            
            if (!state.waterTapOpen) {
                showWaterTapNotification();
                return;
            }
            
            startWashing();
        });

        // Notification Buttons
        completeButton.addEventListener('click', () => {
            completeNotification.classList.remove('show');
            resetMachine();
        });

        waterTapButton.addEventListener('click', () => {
            waterTapNotification.classList.remove('show');
            // Simulate fixing water tap
            state.waterTapOpen = true;
        });

        // Function to show water tap notification
        function showWaterTapNotification() {
            waterTapNotification.classList.add('show');
        }

        // Function to show complete notification
        function showCompleteNotification() {
            completeNotification.classList.add('show');
        }

        // Function to start washing
        function startWashing() {
            state.isRunning = true;
            statusIndicator.classList.add('running');
            statusIcon.className = 'fas fa-sync-alt';
            startButton.disabled = true;
            startButton.innerHTML = '<i class="fas fa-spinner"></i><span>Washing...</span>';
            
            // Handle delayed start
            if (state.delayEnabled) {
                statusText.textContent = `Starting in ${state.delayHours}h`;
                
                // For demo purposes, we'll speed up time (1 hour = 3 seconds)
                let countdownSeconds = state.delayHours * 3;
                let minutes, seconds, hours;
                
                const countdownInterval = setInterval(() => {
                    countdownSeconds--;
                    
                    hours = Math.floor(countdownSeconds / 3600);
                    minutes = Math.floor((countdownSeconds % 3600) / 60);
                    seconds = countdownSeconds % 60;
                    
                    statusText.textContent = `Starting in ${hours ? hours + 'h ' : ''}${minutes}m ${seconds}s`;
                    
                    if (countdownSeconds <= 0) {
                        clearInterval(countdownInterval);
                        runWashCycle();
                    }
                }, 1000);
            } else {
                runWashCycle();
            }
        }

        // Function to run the wash cycle
        function runWashCycle() {
            statusText.textContent = 'Washing...';
            
            // Simulate washing time based on program and mode
            // For demo purposes, this is shortened (real machines take 1-3 hours)
            let washTime = state.program === 'basic' ? 10 : 15; // seconds
            
            if (state.mode === 'eco') {
                washTime += 5; // eco takes longer but uses less water/energy
            }
            
            setTimeout(() => {
                completeWashing();
            }, washTime * 1000);
        }

        // Function to complete washing
        function completeWashing() {
            statusText.textContent = 'Complete';
            statusIcon.className = 'fas fa-check-circle';
            statusIndicator.classList.remove('running');
            showCompleteNotification();
        }

        // Function to reset the machine
        function resetMachine() {
            state.isRunning = false;
            statusIcon.className = 'fas fa-power-off';
            statusText.textContent = 'Ready';
            startButton.disabled = false;
            startButton.innerHTML = '<i class="fas fa-play"></i><span>Start Washing</span>';
        }
    </script>
</body>
</html>
